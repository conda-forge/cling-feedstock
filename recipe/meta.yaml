{% set version = "1.1" %}
{% set build_number = 0 %}
{% set clang_version = "16.0.6" %}

package:
  name: cling
  version: {{ version }}

source:
  url: https://github.com/root-project/cling/archive/v{{ version }}.tar.gz
  sha256: e8b33b5e99c6267a85be71fc6eb8e5622ce8aee864c60587cb71f43c27e97032
  patches:
    # Export all symbols on windows to generate import library
    - patches/0001-Export-all-symbols-on-windows.patch
    # Do not build Jupyter kernel - use xeus-cling instead
    - patches/0002-remove-jupyter.patch
    # Prevent setting sysroot include directory on OS X
    - patches/0003-Drop-compile-time-sysroot.patch
    # Enable redefinitions
    - patches/0004-enable-redefinition-allowed.patch
    # LLVM_REQUIES_EH
    - patches/0005-Set-LLVM_REQUIRES_EH-for-Cling.patch
    # backport some relevant commits for aarch, see https://github.com/root-project/cling/issues/550
    # https://github.com/root-project/cling/commit/e129657b8e7ee175b5df29751fc7eec064492ef9
    - patches/0006-Fix-weak-hidden-symbols-on-AArch64.patch
    # https://github.com/root-project/cling/commit/1b1f9296ae7873582c2aae21c6398d9dcfa960e2
    - patches/0007-Enable-JITLink-by-default-for-AArch64-on-Linux.patch

build:
  number: {{ build_number }}
  run_exports:
    - {{ pin_subpackage("cling", max_pin='x.x') }}

requirements:
  build:
    - cmake
    - ninja
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - llvmdev {{ clang_version }}   # [build_platform != target_platform]
    - libxml2                       # [build_platform != target_platform]
    - zlib                          # [build_platform != target_platform]
    - zstd                          # [build_platform != target_platform]
  host:
    - clangdev {{ clang_version }} cling_{{ version }}*
    - llvmdev
    - llvm
    - zlib
    - zstd
  run:
    # We really depend on the host compiler at runtime:
    #  - the host compiler STL is one to be used.
    #  - it is used by cling's runtime compatibility check.
    - {{ compiler('cxx') }}  # [linux]
    - clangdev {{ clang_version }} cling_{{ version }}*

test:
  commands:
    - test -f $PREFIX/bin/cling  # [unix]
    - if exist %LIBRARY_PREFIX%\\bin\\libcling.dll (exit 0) else (exit 1)  # [win]
    - if exist %LIBRARY_PREFIX%\\lib\\libcling.lib (exit 0) else (exit 1)  # [win]
    - cling '2+3; 0'
    - cling '#include <vector>'

about:
  dev_url: https://github.com/root-project/cling
  doc_url: https://root.cern.ch/cling
  home: https://root.cern.ch/cling
  license: NCSA OR LGPL-2.1-only
  license_file: LICENSE.TXT
  summary: Cling - The Interactive C++ Interpreter
  description: Cling is an interactive C++ interpreter, built on top of Clang and LLVM compiler infrastructure. Cling realizes the read-eval-print loop (REPL) concept, in order to leverage rapid application development. Implemented as a small extension to LLVM and Clang, the interpreter reuses their strengths such as the praised concise and expressive compiler diagnostics.

extra:
  recipe-maintainers:
    - martinRenou
    - SylvainCorlay
    - JohanMabille
    - gouarin
    - chrisburr
    - h-vetinari
