{% set name = "cling" %}
{% set version = "0.8" %}
{% set sha256 = "0820fbb88066bd0ffd76d183c80c146ee4a5ef455414aa20622bb6d5747ecfb6" %}
{% set build_number = 2 %}
{% set clang_version = [5, 0, 0] %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/root-project/cling/archive/v{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    # Export all symbols on windows to generate import library
    - patches/0001-Export-all-symbols-on-windows.patch
    # Do not build Jupyter kernel - use xeus-cling instead
    - patches/0001-remove-jupyter.patch
    - patches/0027-conda-packaging.patch
    # Prevent setting sysroot include directory on OS X
    - patches/0001-Drop-compile-time-sysroot.patch
    # Enable redefinitions
    - patches/enable-redefinition-allowed.patch

build:
  number: {{ build_number }}
  skip: true  # [win and vc<14]
  run_exports:
    - {{ pin_subpackage(name, max_pin='x.x') }}

requirements:
  build:
    - cmake
    - ninja  # [win]
    - {{ compiler('cxx') }}
    - make
  host:
    - llvmdev {{ clang_version[0] }}
    - clangdev {{ clang_version|join('.') }}
    - clang_variant * cling_v{{ version }}
    - zlib
  run:
    # We really depend on the host compiler at runtime:
    #  - the host compiler STL is one to be used.
    #  - it is used by cling's runtime compatibility check.
    - {{ compiler('cxx') }}  # [linux]
    - clangdev {{ clang_version|join('.') }}
    - clang_variant * cling_v{{ version }}
    - sysroot_linux-64  # [linux]

test:
  commands:
    - test -f $PREFIX/bin/cling  # [unix]
    - if exist %LIBRARY_PREFIX%\\bin\\libcling.dll (exit 0) else (exit 1)  # [win]
    - if exist %LIBRARY_PREFIX%\\lib\\libcling.lib (exit 0) else (exit 1)  # [win]
    - cling '2+3; 0'
    - cling '#include <vector>'

about:
  dev_url: https://github.com/root-project/cling
  doc_url: https://root.cern.ch/cling
  home: https://root.cern.ch/cling
  license: NCSA OR LGPL-2.1-only
  license_file: LICENSE.TXT
  summary: Cling - The Interactive C++ Interpreter
  description: Cling is an interactive C++ interpreter, built on top of Clang and LLVM compiler infrastructure. Cling realizes the read-eval-print loop (REPL) concept, in order to leverage rapid application development. Implemented as a small extension to LLVM and Clang, the interpreter reuses their strengths such as the praised concise and expressive compiler diagnostics.

extra:
  recipe-maintainers:
    - SylvainCorlay
    - JohanMabille
    - gouarin
    - chrisburr
